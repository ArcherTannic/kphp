<?php

define('PHP_INT_MAX', 2147483647);
define('PHP_INT_SIZE', 4);
define('PHP_EOL', "\n");

if (0) {
  define('PHP_SAPI', php_sapi_name());//"Defined in source code"
}

$_SERVER ::: var;
$_GET ::: var;
$_POST ::: var;
$_FILES ::: var;
$_COOKIE ::: var;
$_REQUEST ::: var;
$_ENV ::: var;
$argc ::: var;
$argv ::: var;

$MC ::: MC;
$MC_True ::: MC;
$config ::: var;
$Durov ::: var;
$FullMCTime ::: var;
$KPHP_MC_WRITE_STAT_PROBABILITY ::: var;



extern_function base128DecodeMixed ($str ::: var) ::: var;
extern_function debugLogPlain ($section ::: string, $text ::: string) ::: var;
extern_function debugServerLog (...);


function ob_clean() ::: void;
function ob_end_clean() ::: bool;
function ob_get_clean() ::: OrFalse <string>;
function ob_get_contents() ::: string;
function ob_start ($x ::: string = "") ::: void;
function ob_flush () ::: void;
function ob_end_flush () ::: bool;
function ob_get_flush () ::: OrFalse <string>;
function ob_get_length () ::: OrFalse <int>;
function ob_get_level () ::: int;

function header ($str ::: string, $replace ::: bool = true, $http_response_code ::: int = 0) ::: void;
function setcookie ($name ::: string, $value ::: string, $expire ::: int = 0, $path ::: string = '', $domain ::: string = '', $secure ::: bool = false, $http_only ::: bool = false) ::: void;
function setrawcookie ($name ::: string, $value ::: string, $expire ::: int = 0, $path ::: string = '', $domain ::: string = '', $secure ::: bool = false, $http_only ::: bool = false) ::: void;
function register_shutdown_function (callback() ::: var) ::: void;//TODO var ::: callback()
/* // removed because it's not working now.
  function fastcgi_finish_request() ::: void;
*/

define('E_ERROR', 1);
define('E_WARNING', 2);
define('E_PARSE', 4);
define('E_NOTICE', 8);
define('E_CORE_ERROR', 16);
define('E_CORE_WARNING', 32);
define('E_COMPILE_ERROR', 64);
define('E_COMPILE_WARNING', 128);
define('E_USER_ERROR', 256);
define('E_USER_WARNING', 512);
define('E_USER_NOTICE', 1024);
define('E_STRICT', 2048);
define('E_RECOVERABLE_ERROR', 4096);
define('E_DEPRECATED', 8192);
define('E_USER_DEPRECATED', 16384);
define('E_ALL', 32767);

function set_server_status ($status ::: string) ::: bool;

function error_get_last() ::: var;
function error_reporting ($e ::: int = TODO) ::: int;
function warning ($message ::: string) ::: void;

function ini_get ($s ::: string) ::: OrFalse <string>;
function ini_set ($s ::: string, $v ::: string) ::: bool;

function memory_get_usage ($real_usage ::: bool = false) ::: int;
function memory_get_peak_usage ($real_usage ::: bool = false) ::: int;
function memory_get_total_usage() ::: int;
function memory_get_static_usage() ::: int;

function get_net_time() ::: float;
function get_script_time() ::: float;
function get_net_queries_count() ::: int;

function get_engine_uptime() ::: int;
function get_engine_version() ::: string;
function get_engine_workers_number() ::: int;

function getKeyByPos ($a ::: array, $n ::: int) ::: var;
function getValueByPos ($a ::: array, $n ::: int) ::: ^1[];
function create_vector ($n ::: int, $x ::: Any) ::: array <^2>;//TODO version with 1 parameter

function implode ($s ::: string, $v ::: array) ::: string;
function explode ($delimiter ::: string, $str ::: string, $limit ::: int = INT_MAX) ::: array <string>;

function array_chunk ($a ::: array, $chunk_size ::: int, $preserve_keys ::: bool = false) ::: array <^1>;

function array_splice (&$a ::: array, $offset ::: int, $length ::: int, $replacement ::: array = array()) ::: ^1;
function array_merge auto ($a1 ::: array, $a2  ::: array = array(), $a3  ::: array = array(),
            $a4 ::: array = array(), $a5  ::: array = array(), $a6  ::: array = array(),
            $a7 ::: array = array(), $a8  ::: array = array(), $a9  ::: array = array(),
           $a10 ::: array = array(), $a11 ::: array = array(), $a12 ::: array = array())
                ::: lca <^1, ^2, ^3, ^4, ^5, ^6, ^7, ^8, ^9, ^10, ^11, ^12>;
function array_intersect_key ($a1 ::: array, $a2 ::: array) ::: ^1;
function array_intersect ($a1 ::: array, $a2 ::: array) ::: ^1;
function array_diff_key ($a1 ::: array, $a2 ::: array) ::: ^1;
function array_diff ($a1 ::: array, $a2 ::: array, $a3 ::: array = TODO) ::: ^1;
function array_reverse ($a ::: array, $preserve_keys ::: bool = false) ::: ^1;
function array_shift (&$a ::: array) ::: ^1[];
function array_unshift (&$a ::: array, $val ::: Any) ::: int;
function array_key_exists ($v ::: Any, $a ::: array) ::: bool;
function array_search ($val ::: Any, $a ::: array, $strict ::: bool = false) ::: var;
function array_rand ($a ::: array, $num ::: int = 1) ::: var;
function array_keys ($a ::: array) ::: array <var>;
function array_values ($a ::: array) ::: ^1;
function array_unique ($a ::: array) ::: ^1;
function array_count_values ($a ::: array) ::: array <int>;
function array_flip ($a ::: array) ::: array <var>;
function in_array ($value ::: Any, $a ::: array, $strict ::: bool = false) ::: bool;
function array_fill ($start_index ::: int, $num ::: int, $value ::: Any) ::: array <^3>;
function array_fill_keys ($a ::: array, $value ::: Any) ::: array <^2>;
function array_combine ($keys ::: array, $values ::: array) ::: ^2;
function range ($from, $to, $step ::: int = 1) ::: array <var>;//TODO
function array_push (&$a ::: array, $val2 ::: Any, $val3 ::: Any = TODO, $val4 ::: Any = TODO, $val5 ::: Any = TODO, $val6 ::: Any = TODO) ::: int;
function array_pop (&$a ::: array) ::: ^1[];
function array_sum ($a ::: array) ::: float;//TODO
function array_slice ($a ::: array, $offset ::: int, $length = null, $preserve_keys ::: bool = false) ::: ^1;
function array_pad auto ($a ::: array, $size ::: int, $value ::: Any) ::: array< lca< ^1[], ^3 > >;

define('ARRAY_FILTER_USE_KEY', 1);

function array_filter ($a ::: array, callback ($x ::: ^1[]) ::: bool = TODO) ::: ^1;
function array_map (callback ($x ::: ^2[]) ::: Any, $a ::: array) ::: array <^1()>;
function array_reduce auto ($a ::: array, callback($carry ::: lca<^3, ^2()>, $item ::: ^1[]) ::: Any, $initial ::: Any) ::: lca<^2(), ^3>;
function array_reserve (&$a ::: array, $int_size ::: int, $string_size ::: int, $make_vector_if_possible ::: bool) ::: void;
function array_is_vector ($a ::: array) ::: bool;

function empty ($val ::: Any) ::: bool;
function count ($val ::: Any) ::: int;
function sizeof ($val ::: Any) ::: int;
function gettype ($v ::: Any) ::: string;
function is_scalar ($v ::: Any) ::: bool;
function is_numeric ($v ::: Any) ::: bool;
function is_null ($v ::: Any) ::: bool;
function is_bool ($v ::: Any) ::: bool;
function is_int ($v ::: Any) ::: bool;
function is_integer ($v ::: Any) ::: bool;
function is_long ($v ::: Any) ::: bool;
function is_finite ($v ::: float) ::: bool;
function is_infinite ($v ::: float) ::: bool;
function is_nan ($v ::: float) ::: bool;
function is_float ($v ::: Any) ::: bool;
function is_double ($v ::: Any) ::: bool;
function is_real ($v ::: Any) ::: bool;
function is_string ($v ::: Any) ::: bool;
function is_array ($v ::: Any) ::: bool;
function is_object ($v ::: Any) ::: bool;
function get_class ($v ::: Any) ::: string;
function print_r ($v ::: Any, $buffered ::: bool = false) ::: string;
function var_export ($v ::: Any, $buffered ::: bool = false) ::: string;

define('DATE_ATOM', "Y-m-d\TH:i:sP");
define('DATE_COOKIE', "l, d-M-y H:i:s T");
define('DATE_ISO8601', "Y-m-d\TH:i:sO");
define('DATE_RFC822', "D, d M y H:i:s O");
define('DATE_RFC850', "l, d-M-y H:i:s T");
define('DATE_RFC1036', "D, d M y H:i:s O");
define('DATE_RFC1123', "D, d M Y H:i:s O");
define('DATE_RFC2822', "D, d M Y H:i:s O");
define('DATE_RFC3339', "Y-m-d\TH:i:sP");
define('DATE_RSS', "D, d M Y H:i:s O");
define('DATE_W3C', "Y-m-d\TH:i:sP");

function checkdate ($month ::: int, $day ::: int, $year ::: int) ::: bool;
function date ($format ::: string, $timestamp ::: int = INT_MIN) ::: string;
function date_default_timezone_set ($s ::: string) ::: bool;
function date_default_timezone_get() ::: string;
function getdate ($timestamp ::: int = INT_MIN) ::: array <var>;
function gmdate ($format ::: string, $timestamp ::: int = INT_MIN) ::: string;
function gmmktime ($h ::: int = INT_MIN, $m ::: int = INT_MIN, $s ::: int = INT_MIN, $month ::: int = INT_MIN, $day ::: int = INT_MIN, $year ::: int = INT_MIN) ::: int;
function localtime ($timestamp ::: int = INT_MIN, $is_associative ::: bool = false);
function microtime ($get_as_float ::: bool = false) ::: var;//TODO
function mktime ($h ::: int = INT_MIN, $m ::: int = INT_MIN, $s ::: int = INT_MIN, $month ::: int = INT_MIN, $day ::: int = INT_MIN, $year ::: int = INT_MIN) ::: int;
function strftime ($format ::: string, $timestamp ::: int = INT_MIN) ::: string;
function strtotime ($time ::: string, $timestamp ::: int = INT_MIN) ::: OrFalse <int>;
function time() ::: int;

function debug_backtrace() ::: array <array <string> >;
function posix_getpid() ::: int;
function posix_getuid() ::: int;
function posix_getpwuid($uid ::: int) ::: OrFalse <array <var> >;
function getopt ($options ::: string, $longopt ::: array = array()) ::: OrFalse <array <var> >;
function gethostbynamel ($name ::: string) ::: OrFalse <array <string> >;
function inet_pton ($address ::: string) ::: OrFalse <string>;

function pack (...) ::: string;
function unpack ($pattern ::: string, $data ::: string) ::: array <var>;

define('JSON_UNESCAPED_UNICODE', 1);
define('JSON_FORCE_OBJECT', 16);
define('JSON_PARTIAL_OUTPUT_ON_ERROR', 512);

function serialize ($v ::: Any) ::: string;
function unserialize ($v ::: string) ::: CONST var;
function json_encode ($v ::: Any, $options ::: int = 0) ::: OrFalse<string>;
function json_decode ($v ::: string, $assoc ::: bool = false) ::: var;

define('PREG_PATTERN_ORDER', 1);
define('PREG_SET_ORDER', 2);
define('PREG_OFFSET_CAPTURE', 4);
define('PREG_SPLIT_NO_EMPTY', 8);
define('PREG_SPLIT_DELIM_CAPTURE', 16);
define('PREG_SPLIT_OFFSET_CAPTURE', 32);

function preg_match ($regex ::: regexp, $subject ::: string, &$matches ::: var = TODO, $flags ::: int = 0, $offset ::: int = 0) ::: OrFalse <int>;//TODO
function preg_match_all ($regex ::: regexp, $subject ::: string, &$matches ::: var = TODO, $flags ::: int = 0) ::: OrFalse <int>;//TODO
function preg_replace ($regex ::: regexp, $replace_val, $subject, $limit ::: int = -1, &$replace_count ::: int = TODO) ::: var;
function preg_replace_callback ($regex ::: regexp, callback($x ::: array<string>) ::: string, $subject, $limit ::: int = -1, &$replace_count ::: int = TODO) ::: var;
function preg_quote ($str ::: string, $delimiter ::: string = '') ::: string;
function preg_last_error() ::: int;
function preg_split ($pattern ::: regexp, $subject ::: string, $limit ::: int = -1, $flags ::: int = 0) ::: OrFalse < array <var> >;

define('SORT_REGULAR', 0);
define('SORT_NUMERIC', 1);
define('SORT_STRING', 2);

function shuffle (&$a ::: array) ::: void;
function sort (&$a ::: array, $flag ::: int = SORT_REGULAR) ::: void;
function rsort (&$a ::: array, $flag ::: int = SORT_REGULAR) ::: void;
function usort (&$a ::: array, callback($x ::: ^1[], $y ::: ^1[]) ::: int) ::: void;
function asort (&$a ::: array, $flag ::: int = SORT_REGULAR) ::: void;
function arsort (&$a ::: array, $flag ::: int = SORT_REGULAR) ::: void;
function uasort (&$a ::: array, callback($x ::: ^1[], $y ::: ^1[]) ::: int) ::: void;
function ksort (&$a ::: array, $flag ::: int = SORT_REGULAR) ::: void;
function krsort (&$a ::: array, $flag ::: int = SORT_REGULAR) ::: void;
function uksort (&$a ::: array, callback($x ::: var, $y ::: var) ::: int) ::: void;
function natsort (&$a ::: array) ::: void;

function lcg_value() ::: float;
function uniqid ($prefix ::: string = '', $more_entropy ::: int = false) ::: string;

function srand ($seed ::: int = INT_MIN) ::: void;
function rand ($l ::: int = TODO_OVERLOAD, $r ::: int = TODO_OVERLOAD) ::: int;
function getrandmax() ::: int;
function mt_srand ($seed ::: int = INT_MIN) ::: void;
function mt_rand ($l ::: int = TODO_OVERLOAD, $r ::: int = TODO_OVERLOAD) ::: int;
function mt_getrandmax() ::: int;

function hash_algos () ::: array <string>;
function hash ($algo ::: string, $data ::: string, $raw_output ::: bool = false) ::: string;
function hash_hmac ($algo ::: string, $data ::: string, $key ::: string, $raw_output ::: bool = false) ::: string;
function sha1 ($s ::: string, $raw_output ::: bool = false) ::: string;
function md5 ($s ::: string, $raw_output ::: bool = false) ::: string;
function md5_file ($s ::: string, $raw_output ::: bool = false) ::: OrFalse <string>;
function crc32 ($s ::: string) ::: int;
function crc32_file ($s ::: string) ::: int;

define('X509_PURPOSE_SSL_CLIENT'    ,     1);
define('X509_PURPOSE_SSL_SERVER'    ,     2);
define('X509_PURPOSE_NS_SSL_SERVER' ,     3);
define('X509_PURPOSE_SMIME_SIGN'    ,     4);
define('X509_PURPOSE_SMIME_ENCRYPT' ,     5);
define('X509_PURPOSE_CRL_SIGN'      ,     6);
define('X509_PURPOSE_ANY'           ,     7);
define('X509_PURPOSE_OCSP_HELPER'   ,     8);
define('X509_PURPOSE_TIMESTAMP_SIGN',     9);

define('OPENSSL_ALGO_SHA1'  ,  1);
define('OPENSSL_ALGO_MD5'   ,  2);
define('OPENSSL_ALGO_MD4'   ,  3);
define('OPENSSL_ALGO_MD2'   ,  4);
define('OPENSSL_ALGO_DSS1'  ,  5);
define('OPENSSL_ALGO_SHA224',  6);
define('OPENSSL_ALGO_SHA256',  7);
define('OPENSSL_ALGO_SHA384',  8);
define('OPENSSL_ALGO_SHA512',  9);
define('OPENSSL_ALGO_RMD160', 10);

function openssl_public_encrypt ($data ::: string, &$result ::: var, $key ::: string) ::: bool;
function openssl_private_decrypt ($data ::: string, &$result ::: var, $key ::: string) ::: bool;
function openssl_pkey_get_private ($key ::: string, $passphrase ::: string = '') ::: OrFalse <string>;
function openssl_pkey_get_public ($key ::: string) ::: OrFalse <string>;
function openssl_verify ($data ::: string, $signature ::: string, $key ::: string, $signature_alg ::: int = 1) ::: int;
function openssl_random_pseudo_bytes ($length::: int) ::: OrFalse <string>;
function openssl_x509_parse ($x509cert ::: string, $shortnames ::: bool = true) ::: OrFalse< array<var> >;
function openssl_x509_checkpurpose ($x509cert ::: string, $purpose ::: int) ::: var;

function gzencode ($str ::: string, $level ::: int = -1) ::: string;
function gzdecode ($str ::: string) ::: string;
function gzcompress ($str ::: string, $level ::: int = -1) ::: string;
function gzuncompress ($str ::: string) ::: string;
function base64_decode ($str ::: string, $strict ::: bool = false) ::: OrFalse <string>;
function base64_encode ($str ::: string) ::: string;
function base64url_decode_ulong ($str ::: string) ::: ULong;
function base64url_encode_ulong ($val ::: ULong) ::: string;
function base64url_decode_ulong_NN ($str ::: string) ::: ULong;
function base64url_encode_ulong_NN ($val ::: ULong) ::: string;
function http_build_query ($str ::: array) ::: string;
function rawurldecode ($str ::: string) ::: string;
function rawurlencode ($str ::: string) ::: string;
function urldecode ($str ::: string) ::: string;
function urlencode ($str ::: string) ::: string;

define('PHP_URL_SCHEME', 0);
define('PHP_URL_HOST', 1);
define('PHP_URL_PORT', 2);
define('PHP_URL_USER', 3);
define('PHP_URL_PASS', 4);
define('PHP_URL_PATH', 5);
define('PHP_URL_QUERY', 6);
define('PHP_URL_FRAGMENT', 7);

function parse_url ($str ::: string, $component ::: int = -1) ::: var;

define('M_PI', 3.1415926535897932384626433832795);

function abs ($v);//TODO
function acos ($v ::: float) ::: CONST float;
function atan ($v ::: float) ::: CONST float;
function atan2 ($y ::: float, $x ::: float) ::: CONST float;
function base_convert ($number ::: string, $frombase ::: int, $tobase ::: int) ::: CONST string;
function ceil ($v ::: float) ::: CONST float;
function cos ($v ::: float) ::: CONST float;
function deg2rad ($v ::: float) ::: CONST float;
function exp ($v ::: float) ::: CONST float;
function floor ($v ::: float) ::: CONST float;
function log ($v ::: float, $base ::: float = 2.7182818284590452353602874713527) ::: CONST float;
function fmod ($x ::: float, $y ::: float) ::: CONST float;
function pi() ::: CONST float;
function round ($v ::: float, $precision ::: int = 0) ::: CONST float;
function sin ($v ::: float) ::: CONST float;
function sqrt ($v ::: float) ::: CONST float;
function tan ($v ::: float) ::: CONST float;


define('ENT_HTML401', 0);
define('ENT_COMPAT', 0);
define('ENT_QUOTES', 1);
define('ENT_NOQUOTES', 2);

function addcslashes ($str ::: string, $what ::: string) ::: string;
function addslashes ($str ::: string) ::: string;
function bindec ($number ::: string) ::: int;
function bin2hex ($str ::: string) ::: string;
function chr ($v ::: int) ::: string;
function convert_cyr_string ($str ::: string, $from ::: string, $to ::: string) ::: string;
function count_chars ($str ::: string, $mode ::: int = 0) ::: var;
function decbin ($number ::: int) ::: string;
function dechex ($number ::: int) ::: string;
function hex2bin ($str ::: string) ::: string;
function hexdec ($number ::: string) ::: int;
function htmlentities ($str ::: string) ::: string;
function html_entity_decode ($str ::: string, $flags ::: int = ENT_COMPAT, $encoding ::: string = '1251') ::: string;
function htmlspecialchars ($str ::: string, $flags ::: int = ENT_COMPAT) ::: string;
function htmlspecialchars_decode ($str ::: string, $flags ::: int = ENT_COMPAT) ::: string;
function levenshtein ($str1 ::: string, $str2 ::: string) ::: int;
function mysql_escape_string ($str ::: string) ::: string;
function nl2br ($str ::: string, $is_xhtml = true) ::: string;
function number_format ($number ::: float, $decimals ::: int = 0, $dec_point = '.', $thousands_sep = ',') ::: string;
function parse_str ($str ::: string, &$arr ::: var) ::: void; // TODO: why no ::: array? // TODO because it is an output parameter, input can have any type and it's ok.
function ord ($c ::: string) ::: int;
function strcasecmp ($str1 ::: string, $str2 ::: string) ::: int;
function strcmp ($str1 ::: string, $str2 ::: string) ::: int;
function stripslashes ($str ::: string) ::: string;
function strip_tags ($str ::: string, $allow ::: string = "") ::: string;
function strncmp ($str1 ::: string, $str2 ::: string, $len ::: int) ::: int;
function strnatcmp ($str1 ::: string, $str2 ::: string) ::: int;
function wordwrap ($str ::: string, $width ::: int = 75, $break ::: string = '\n', $cut ::: bool = false) ::: string;


function ip2long ($ip ::: string) ::: OrFalse <int>;
function ip2ulong ($ip ::: string) ::: OrFalse <string>;
function long2ip ($ip) ::: string;

function get_magic_quotes_gpc() ::: bool;
function php_sapi_name() ::: string;

define('STR_PAD_LEFT', 0);
define('STR_PAD_RIGHT', 1);
define('STR_PAD_BOTH', 2);

function str_pad ($input ::: string, $len ::: int, $pad_str ::: string = " ", $pad_type ::: int = STR_PAD_RIGHT) ::: string;
function str_repeat ($s ::: string, $multiplier ::: int) ::: string;

function lcfirst ($str ::: string) ::: string;
function ucfirst ($str ::: string) ::: string;
function lcwords ($str ::: string) ::: string;
function ucwords ($str ::: string) ::: string;

function vprintf ($format ::: string, $args ::: array) ::: int;
function printf (...) ::: int;
function vsprintf ($format ::: string, $args ::: array) ::: string;
function sprintf (...) ::: string;
function vfprintf ($stream, $format ::: string, $args ::: array) ::: int;
function fprintf (...) ::: int;

function fputcsv ($stream, $fields ::: array, $delimiter = ",", $enclosure = "\"", $escape = "\\") ::: OrFalse <int>;
function fgetcsv ($stream, $length = 0, $delimiter = ",", $enclosure = "\"", $escape = "\\") ::: OrFalse <array <var> >;

function strtr ($subject ::: string, $replace_pairs, $third = TODO) ::: string;//TODO
//function strtr ($subject, $from, $to);
function str_replace ($search, $replace, $subject, &$count ::: int = TODO) ::: lca < ^3, string>;
function str_split ($str ::: string, $split_length ::: int = 1) ::: array <string>;
function strlen ($str ::: string) ::: int;
function strpbrk ($haystack ::: string, $char_list ::: string) ::: OrFalse <string>;
function strpos ($haystack ::: string, $needle, $offset ::: int = 0) ::: OrFalse <int>;
function stripos ($haystack ::: string, $needle, $offset ::: int = 0) ::: OrFalse <int>;
function strrpos ($haystack ::: string, $needle, $offset ::: int = 0) ::: OrFalse <int>;
function strripos ($haystack ::: string, $needle, $offset ::: int = 0) ::: OrFalse <int>;
function strstr ($haystack ::: string, $needle, $before_needle ::: bool = false) ::: OrFalse <string>;
function stristr ($haystack ::: string, $needle, $before_needle ::: bool = false) ::: OrFalse <string>;
function strrev ($str ::: string) ::: string;
function strtolower ($str ::: string) ::: string;
function strtoupper ($str ::: string) ::: string;
function substr ($str ::: string, $start ::: int, $length ::: int = INT_MAX) ::: OrFalse <string>;
function substr_count ($haystack ::: string, $needle ::: string, $offset ::: int = 0, $length ::: int = INT_MAX) ::: int;
function substr_replace ($str ::: string, $replacement ::: string, $start ::: int, $length ::: int = INT_MAX) ::: OrFalse <string>;
function substr_compare ($main_str ::: string, $str ::: string, $offset ::: int, $length ::: int = INT_MAX, $case_insensitivity ::: bool = false) ::: OrFalse <int>;

function trim ($s ::: string, $what ::: string = " \n\r\t\v\0") ::: string;
function ltrim ($s ::: string, $what ::: string = " \n\r\t\v\0") ::: string;
function rtrim ($s ::: string, $what ::: string = " \n\r\t\v\0") ::: string;

function xor_strings ($s ::: string, $t ::: string) ::: string;

define('LC_ALL', 6);
define('LC_COLLATE', 3);
define('LC_CTYPE', 0);
define('LC_MONETARY', 4);
define('LC_NUMERIC', 1);
define('LC_TIME', 2);
define('LC_MESSAGES', 5);

function setlocale ($category ::: int, $locale ::: string) ::: OrFalse <string>;

function iconv ($input_encoding ::: string, $output_encoding ::: string, $input_str ::: string) ::: OrFalse <string>;

function mb_check_encoding ($str ::: string, $encoding ::: string = "1251") ::: bool;
function mb_strlen ($str ::: string, $encoding ::: string = "1251") ::: int;
function mb_strpos ($haystack ::: string, $needle ::: string, $offset ::: int = 0, $encoding ::: string = "1251") ::: OrFalse <int>;
function mb_stripos ($haystack ::: string, $needle ::: string, $offset ::: int = 0, $encoding ::: string = "1251") ::: OrFalse <int>;
function mb_strtolower ($str ::: string, $encoding ::: string = "1251") ::: string;
function mb_strtoupper ($str ::: string, $encoding ::: string = "1251") ::: string;
function mb_substr ($str ::: string, $start ::: int, $length ::: var = INT_MAX, $encoding ::: string = "1251") ::: string;

define('PHP_ROUND_HALF_UP', 123423141);
define('PHP_ROUND_HALF_DOWN', 123423144);
define('PHP_ROUND_HALF_EVEN', 123423145);
define('PHP_ROUND_HALF_ODD', 123423146);

function bcscale ($scale ::: int) ::: void;
function bcdiv ($lhs ::: string, $rhs ::: string, $scale ::: int = INT_MIN) ::: string;
function bcmod ($lhs ::: string, $rhs ::: string) ::: string;
function bcpow ($lhs ::: string, $rhs ::: string) ::: string;
function bcadd ($lhs ::: string, $rhs ::: string, $scale ::: int = INT_MIN) ::: string;
function bcsub ($lhs ::: string, $rhs ::: string, $scale ::: int = INT_MIN) ::: string;
function bcmul ($lhs ::: string, $rhs ::: string, $scale ::: int = INT_MIN) ::: string;
function bccomp ($lhs ::: string, $rhs ::: string, $scale ::: int = INT_MIN) ::: int;

function mysqli_errno($dn ::: DB) ::: int;
function mysqli_error($dn ::: DB) ::: string;

define('MYSQLI_ASSOC', 1);

function mysqli_affected_rows($dn ::: DB) ::: int;
function mysqli_fetch_array($query_id ::: int, $result_type ::: int) ::: OrFalse <array <var> >;
function mysqli_insert_id($dn ::: DB) ::: int;
function mysqli_num_rows($query_id ::: int) ::: int;
function mysqli_query($dn ::: DB, $query ::: string) ::: var;
function vk_mysqli_connect($host ::: string, $port ::: int) ::: DB;
function mysqli_select_db($dn ::: DB, $name ::: string) ::: bool;


function function_exists ($func_name ::: Any) ::: bool;

define('FILE_APPEND', 1);

function basename ($name ::: string, $suffix ::: string = '') ::: string;
function chmod ($name ::: string, $mode ::: int) ::: bool;
function clearstatcache() ::: void;
function copy ($from ::: string, $to ::: string) ::: bool;
function dirname ($name ::: string) ::: string;
function file ($name ::: string) ::: OrFalse <array <string> >;
function file_get_contents ($name ::: string) ::: OrFalse <string>;
function file_put_contents ($name ::: string, $content ::: var, $flags ::: int = 0) ::: OrFalse <int>;
function file_exists ($name ::: string) ::: bool;
function filesize ($name ::: string) ::: OrFalse <int>;
function is_dir ($name ::: string) ::: bool;
function is_file ($name ::: string) ::: bool;
function is_readable ($name ::: string) ::: bool;
function is_writeable ($name ::: string) ::: bool;
function mkdir ($name ::: string, $mode ::: int = 0777, $recursive ::: bool = false) ::: bool;
function php_uname ($mode ::: string = "a") ::: string;
function rename ($oldname ::: string, $newname ::: string) ::: bool;
function realpath ($path ::: string) ::: OrFalse <string>;
function tempnam ($dir ::: string, $prefix ::: string) ::: OrFalse <string>;
function unlink ($name ::: string) ::: bool;
function scandir ($directory ::: string) ::: OrFalse <array <string> >;
function sleep ($seconds ::: int) ::: void;
function usleep ($micro_seconds ::: int) ::: void;

function getimagesize ($name ::: string) ::: var;

define('IMAGETYPE_UNKNOWN', 0);
define('IMAGETYPE_GIF', 1);
define('IMAGETYPE_JPEG', 2);
define('IMAGETYPE_PNG', 3);
define('IMAGETYPE_SWF', 4);
define('IMAGETYPE_PSD', 5);
define('IMAGETYPE_BMP', 6);
define('IMAGETYPE_TIFF_II', 7);
define('IMAGETYPE_TIFF_MM', 8);
define('IMAGETYPE_JPC', 9);
define('IMAGETYPE_JPEG2000', 9);
define('IMAGETYPE_JP2', 10);

/** Memcached **/

define('MEMCACHE_COMPRESSED', 2);

function new_Memcache() ::: MC;
function new_RpcMemcache($fake ::: bool = false) ::: MC;
function new_true_mc ($MC ::: MC, $engine_tag ::: string = "", $engine_name ::: string = "", $is_debug ::: bool = false, $is_debug_empty ::: bool = false, $query_time_threshold ::: float = 0.0) ::: MC;
function new_test_mc ($MC ::: MC, $engine_tag ::: string = "") ::: MC;
function new_rich_mc ($MC ::: MC, $engine_tag ::: string = "") ::: MC;

function memcached_get ($MC ::: MC, $key) throws ::: var;
function memcached_delete ($MC ::: MC, $key ::: string) throws ::: bool;

function memcached_add ($MC ::: MC, $key ::: string, $value ::: Any, $flags ::: int = 0, $expire ::: int = 0) throws ::: bool;
function memcached_set ($MC ::: MC, $key ::: string, $value ::: Any, $flags ::: int = 0, $expire ::: int = 0) throws ::: bool;
function memcached_replace ($MC ::: MC, $key ::: string, $value ::: Any, $flags ::: int = 0, $expire ::: int = 0) throws ::: bool;
function memcached_decrement ($MC ::: MC, $key ::: string, $v ::: Any = 1) throws ::: var;
function memcached_increment ($MC ::: MC, $key ::: string, $v ::: Any = 1) throws ::: var;
function memcached_getLastQueryTime ($MC ::: MC) ::: var;
function memcached_bufferNextLog ($MC ::: MC) ::: void;
function memcached_flushLogBuffer ($MC ::: MC) ::: void;
function memcached_clearLogBuffer ($MC ::: MC) ::: void;

function memcached_addServer ($MC ::: MC, $host ::: string, $port ::: int = 11211, $persistent ::: bool = true, $weight ::: int = 1, $timeout ::: float = 1, $retry_interval ::: int = 15, $status ::: bool = true, $failure_callback ::: var = null, $timeoutms ::: int = -1) ::: bool;
function memcached_connect ($MC ::: MC, $host ::: string, $port ::: int = 11211) ::: bool;
function memcached_pconnect ($MC ::: MC, $host ::: string, $port ::: int = 11211) ::: bool;
function memcached_rpc_connect ($MC ::: MC, $host ::: string, $port ::: int, $default_actor_id ::: Any = 0, $timeout ::: float = 0.3, $connect_timeout ::: float = 0.3, $reconnect_timeout ::: float = 17.0) ::: bool;
function mcGetStats ($MC ::: MC) ::: array <int>;
function mcGetClusterSize ($MC ::: MC) ::: int;

/** vkext **/
function vk_utf8_to_win ($text ::: string, $max_len ::: int = 0, $exit_on_error ::: bool = false) ::: string;
function vk_win_to_utf8 ($text ::: string, $escape ::: bool = true) ::: string;
function vk_flex ($name ::: string, $case_name ::: string, $sex ::: int, $type ::: string, $lang_id ::: int = 0) ::: string;
function vk_json_encode ($v ::: Any) ::: OrFalse<string>;
function vk_json_encode_safe ($v ::: Any) throws ::: string;
function vk_whitespace_pack ($str ::: string, $html_opt ::: bool = false) ::: string;
function vk_sp_simplify ($str ::: string) ::: string;
function vk_sp_full_simplify ($str ::: string) ::: string;
function vk_sp_deunicode ($str ::: string) ::: string;
function vk_sp_to_upper ($str ::: string) ::: string;
function vk_sp_to_lower ($str ::: string) ::: string;
function vk_sp_to_sort ($str ::: string) ::: string;
function vk_sp_remove_repeats ($str ::: string) ::: string;
function vk_sp_to_cyrillic ($str ::: string) ::: string;
function vk_sp_words_only ($str ::: string) ::: string;

function vk_stats_merge_deviation($n1 ::: int, $sum1 ::: Long, $nsigma21 ::: float,
	                          $n2 ::: int, $sum2 ::: Long, $nsigma22 ::: float) ::: float;
function vk_stats_add_deviation($count ::: int, $sum ::: Long, $nsigma2 ::: float, $val ::: int) ::: float;
function vk_stats_decompress_sample($sample ::: string) ::: OrFalse<string>;
function vk_stats_merge_samples($samples ::: array) ::: OrFalse<string>;
function vk_stats_parse_sample($sample ::: string) ::: OrFalse< array<int> >;
function vk_stats_hll_merge($str ::: var) ::: OrFalse<string>;
function vk_stats_hll_count($str ::: string) ::: OrFalse<float>;
function vk_stats_hll_create($a ::: array = array(), $size ::: int = 256) ::: OrFalse<string>;
function vk_stats_hll_add($str ::: string, $a ::: array) ::: OrFalse<string>;

function vk_dot_product auto ($a ::: array, $b ::: array) ::: lca<^1[], ^2[]>;

/** defined in kphp_core.h **/
function likely ($x ::: bool) ::: bool;
function unlikely ($x ::: bool) ::: bool;

/** exceptions **/
function new_Exception ($file ::: string, $line ::: int, $err ::: string = '', $code ::: int = 0) ::: Exception;
function exception_getMessage ($e ::: Exception) ::: string;
function exception_getCode ($e ::: Exception) ::: int;
function exception_getFile ($e ::: Exception) ::: string;
function exception_getLine ($e ::: Exception) ::: int;
function exception_getTrace ($e ::: Exception) ::: array < array < string > >;
function exception_getTraceAsString ($e ::: Exception) ::: string;
function err ($file ::: string, $line ::: int, $code ::: string, $desc ::: string = '') ::: Exception;

/** rpc fetch **/
function fetch_int () throws ::: int;
function fetch_UInt () throws ::: UInt;
function fetch_Long () throws ::: Long;
function fetch_ULong () throws ::: ULong;
function fetch_unsigned_int () throws ::: var;
function fetch_long () throws ::: var;
function fetch_unsigned_long () throws ::: var;
function fetch_unsigned_int_hex () throws ::: string;
function fetch_unsigned_long_hex () throws ::: string;
function fetch_unsigned_int_str () throws ::: string;
function fetch_unsigned_long_str () throws ::: string;
function fetch_double () throws ::: float;
function fetch_string () throws ::: string;
function fetch_string_as_int () throws ::: int;
function fetch_memcache_value () throws ::: var;
function fetch_eof () ::: bool;
function fetch_end () throws ::: bool;
function rpc_parse ($data) ::: bool;

/** rpc store **/
function new_rpc_connection ($str ::: string, $port ::: int, $default_actor_id ::: Any = 0, $timeout ::: float = 0.3, $connect_timeout ::: float = 0.3, $reconnect_timeout ::: float = 17.0) ::: RPC;
function store_gzip_pack_threshold ($pack_threshold_bytes ::: int) ::: void;
function store_start_gzip_pack() ::: void;
function store_finish_gzip_pack ($pack_threshold_bytes ::: int) ::: void;
function rpc_clean() ::: bool;
function rpc_get_clean() ::: string;
function rpc_get_contents() ::: string;
function store_header ($actor_id ::: Any, $flags ::: int = 0) ::: bool;
function store_error ($error_code ::: int, $error_text ::: string) ::: bool;
function store_raw ($v ::: string) ::: bool;
function store_int ($v ::: int) ::: bool;
function store_UInt ($v ::: UInt) ::: bool;
function store_Long ($v ::: Long) ::: bool;
function store_ULong ($v ::: ULong) ::: bool;
function store_unsigned_int ($v ::: Any) ::: bool;
function store_long ($v ::: Any) ::: bool;
function store_unsigned_long ($v ::: Any) ::: bool;
function store_unsigned_int_hex ($v ::: string) ::: bool;
function store_unsigned_long_hex ($v ::: string) ::: bool;
function store_double ($v ::: float) ::: bool;
function store_string ($v ::: string) ::: bool;
function store_many (...) ::: bool;
function store_finish() ::: bool;
function rpc_send ($rpc_conn ::: RPC, $timeout ::: float = -1.0) ::: int;
function rpc_send_noflush ($rpc_conn ::: RPC, $timeout ::: float = -1.0) ::: int;
function rpc_flush () ::: void;
function rpc_get ($request_id ::: int) resumable ::: OrFalse <string>;
function rpc_get_synchronously ($request_id ::: int) ::: OrFalse <string>;
function rpc_get_and_parse ($request_id ::: int) resumable ::: bool;
function rpc_queue_create ($request_ids ::: Any = TODO) ::: int;
function rpc_queue_push ($queue_id ::: int, $request_ids ::: Any) ::: int;
function rpc_queue_empty ($queue_id ::: int) ::: bool;
function rpc_queue_next ($queue_id ::: int, $timeout ::: float = -1.0) resumable ::: int;
function rpc_mc_get ($rpc_conn ::: RPC, $key ::: string, $timeout ::: float = -1.0) throws ::: var;
function rpc_mc_multiget ($rpc_conn ::: RPC, $key ::: array, $timeout ::: float = -1.0, $return_false_if_not_found = false) throws resumable ::: OrFalse <array <var> >;
function rpc_mc_delete ($rpc_conn ::: RPC, $key ::: string, $timeout ::: float = -1.0) throws ::: bool;
function rpc_mc_add ($rpc_conn ::: RPC, $key ::: string, $value, $flags ::: int = 0, $expire ::: int = 0, $timeout ::: float = -1.0) throws ::: bool;
function rpc_mc_set ($rpc_conn ::: RPC, $key ::: string, $value, $flags ::: int = 0, $expire ::: int = 0, $timeout ::: float = -1.0) throws ::: bool;
function rpc_mc_replace ($rpc_conn ::: RPC, $key ::: string, $value, $flags ::: int = 0, $expire ::: int = 0, $timeout ::: float = -1.0) throws ::: bool;
function rpc_mc_decrement ($rpc_conn ::: RPC, $key ::: string, $v ::: Any = 1, $timeout ::: float = -1.0) throws ::: var;
function rpc_mc_increment ($rpc_conn ::: RPC, $key ::: string, $v ::: Any = 1, $timeout ::: float = -1.0) throws ::: var;
function rpc_mc_parse_raw_wildcard_with_flags_to_array ($raw_result ::: string, &$result ::: array) throws ::: bool;
function rpc_tl_query_one ($rpc_conn ::: RPC, $arr ::: Any, $timeout ::: float = -1.0) ::: int;
function rpc_tl_query ($rpc_conn ::: RPC, $arr ::: array, $timeout ::: float = -1.0, $ignore_answer ::: bool = false) ::: array <int>;
function rpc_tl_query_result_one ($query_id ::: int) resumable ::: array <var>;
function rpc_tl_query_result ($query_ids ::: array) resumable ::: array <array <var> >;
function rpc_tl_query_result_synchronously ($query_ids ::: array) ::: array <array <var> >;
function rpc_tl_pending_queries_count () ::: int;

function wait ($id ::: int, $timeout ::: float = -1.0) resumable ::: bool;
function wait_result ($id ::: int, $timeout ::: float = -1.0) throws resumable ::: var;
function wait_synchronously ($id ::: int) ::: bool;
function wait_multiple ($id ::: int) resumable ::: bool;
function wait_queue_create ($request_ids ::: Any = TODO) ::: int;
function wait_queue_push ($queue_id ::: int, $request_ids ::: Any) ::: int;
function wait_queue_empty ($queue_id ::: int) ::: bool;
function wait_queue_next ($queue_id ::: int, $timeout ::: float = -1.0) resumable ::: int;
function wait_queue_next_synchronously ($queue_id ::: int) ::: int;
function sched_yield() resumable ::: void;
function get_running_fork_id() ::: int;

function query_x2 ($x ::: int) ::: int;

/** conversions **/
function boolval ($v ::: Any) ::: bool;
function intval ($v ::: Any) ::: int;
function floatval ($v ::: Any) ::: float;
function strval ($v ::: Any) ::: string;
function uintval ($v ::: Any) ::: UInt;
function longval ($v ::: Any) ::: Long;
function ulongval ($v ::: Any) ::: ULong;
function arrayval ($v ::: array) ::: ^1;
#function objectval ($v ::: Any) ::: object;


/** files **/
define('STDIN', 'php://stdin');
define('STDOUT', 'php://stdout');
define('STDERR', 'php://stderr');

define('SEEK_SET', 0);
define('SEEK_END', 1);
define('SEEK_CUR', 2);

function fopen ($filename ::: string, $mode ::: string);
function fwrite ($stream, $text ::: string) ::: OrFalse <int>;
function fseek ($stream, $offset ::: int, $whence ::: int = SEEK_SET) ::: int;
function rewind ($stream) ::: bool;
function ftell ($stream) ::: OrFalse <int>;
function fread ($stream, $length ::: int) ::: OrFalse <string>;
function fgetc ($stream) ::: OrFalse <string>;
function fgets ($stream, $length ::: int = -1) ::: OrFalse <string>;
function fpassthru ($stream) ::: OrFalse <int>;
function fflush ($stream) ::: bool;
function feof ($stream) ::: bool;
function fclose ($stream) ::: bool;

function stream_context_create ($options ::: var = array());
function stream_context_set_option (&$context, $options_or_wrapper_name ::: var, $option ::: string = TODO, $value ::: var = TODO) ::: bool;

define('STREAM_CLIENT_CONNECT', 1);
define('DEFAULT_SOCKET_TIMEOUT', 60);

function stream_socket_client ($url ::: string, &$error_number ::: var = TODO, &$error_description ::: var = TODO, $timeout ::: float = DEFAULT_SOCKET_TIMEOUT, $flags ::: int = STREAM_CLIENT_CONNECT, $context = null);
function stream_set_blocking ($stream, $mode ::: bool) ::: bool;
function stream_set_write_buffer ($stream, $size ::: int) ::: bool;
function stream_set_read_buffer ($stream, $size ::: int) ::: bool;
function stream_select (&$read, &$write, &$except, $tv_sec, $tv_usec ::: int = 0) ::: OrFalse <int>;


function is_uploaded_file ($filename ::: string) ::: bool;
function move_uploaded_file ($oldname ::: string, $newname ::: string) ::: bool;

/** Long **/
function labs ($lhs ::: Long) ::: Long;
function ldiv ($lhs ::: Long, $rhs ::: Long) ::: Long;
function lmod ($lhs ::: Long, $rhs ::: Long) ::: Long;
function lpow ($lhs ::: Long, $rhs ::: int) ::: Long;
function ladd ($lhs ::: Long, $rhs ::: Long) ::: Long;
function lsub ($lhs ::: Long, $rhs ::: Long) ::: Long;
function lmul ($lhs ::: Long, $rhs ::: Long) ::: Long;
function lshl ($lhs ::: Long, $rhs ::: int) ::: Long;
function lshr ($lhs ::: Long, $rhs ::: int) ::: Long;
function lnot ($lhs ::: Long) ::: Long;
function lor ($lhs ::: Long, $rhs ::: Long) ::: Long;
function land ($lhs ::: Long, $rhs ::: Long) ::: Long;
function lxor ($lhs ::: Long, $rhs ::: Long) ::: Long;
function lcomp ($lhs ::: Long, $rhs ::: Long) ::: int;
function new_Long ($val ::: Any) ::: Long;

/** ULong **/
function uldiv ($lhs ::: ULong, $rhs ::: ULong) ::: ULong;
function ulmod ($lhs ::: ULong, $rhs ::: ULong) ::: ULong;
function ulpow ($lhs ::: ULong, $rhs ::: int) ::: ULong;
function uladd ($lhs ::: ULong, $rhs ::: ULong) ::: ULong;
function ulsub ($lhs ::: ULong, $rhs ::: ULong) ::: ULong;
function ulmul ($lhs ::: ULong, $rhs ::: ULong) ::: ULong;
function ulshl ($lhs ::: ULong, $rhs ::: int) ::: ULong;
function ulshr ($lhs ::: ULong, $rhs ::: int) ::: ULong;
function ulnot ($lhs ::: ULong) ::: ULong;
function ulor ($lhs ::: ULong, $rhs ::: ULong) ::: ULong;
function uland ($lhs ::: ULong, $rhs ::: ULong) ::: ULong;
function ulxor ($lhs ::: ULong, $rhs ::: ULong) ::: ULong;
function ulcomp ($lhs ::: ULong, $rhs ::: ULong) ::: int;
function new_ULong ($val ::: Any) ::: ULong;

/** UInt **/
function uidiv ($lhs ::: UInt, $rhs ::: UInt) ::: UInt;
function uimod ($lhs ::: UInt, $rhs ::: UInt) ::: UInt;
function uipow ($lhs ::: UInt, $rhs ::: int) ::: UInt;
function uiadd ($lhs ::: UInt, $rhs ::: UInt) ::: UInt;
function uisub ($lhs ::: UInt, $rhs ::: UInt) ::: UInt;
function uimul ($lhs ::: UInt, $rhs ::: UInt) ::: UInt;
function uishl ($lhs ::: UInt, $rhs ::: int) ::: UInt;
function uishr ($lhs ::: UInt, $rhs ::: int) ::: UInt;
function uinot ($lhs ::: UInt) ::: UInt;
function uior ($lhs ::: UInt, $rhs ::: UInt) ::: UInt;
function uiand ($lhs ::: UInt, $rhs ::: UInt) ::: UInt;
function uixor ($lhs ::: UInt, $rhs ::: UInt) ::: UInt;
function uicomp ($lhs ::: UInt, $rhs ::: UInt) ::: int;
function new_UInt ($val ::: Any) ::: UInt;


define('UPLOAD_ERR_OK', 0);
define('UPLOAD_ERR_INI_SIZE', 1);
define('UPLOAD_ERR_FORM_SIZE', 2);
define('UPLOAD_ERR_PARTIAL', 3);
define('UPLOAD_ERR_NO_FILE', 4);
define('UPLOAD_ERR_NO_TMP_DIR', 6);
define('UPLOAD_ERR_CANT_WRITE', 7);
define('UPLOAD_ERR_EXTENSION', 8);

function mail ($to ::: string, $subject ::: string, $message ::: string, $additional_headers ::: string = "") ::: bool;

function curl_init ($url ::: string = "") ::: int;
function curl_set_header_function ($id ::: int, callback ($x ::: var, $y ::: var) ::: var) ::: bool;
function curl_setopt ($id ::: int, $option ::: int, $value ::: var) ::: bool;
function curl_setopt_array ($id ::: int, $options ::: array) ::: bool;
function curl_exec ($id ::: int) ::: var;
function curl_getinfo ($id ::: int, $option ::: int = 0) ::: var;
function curl_error ($id ::: int) ::: string;
function curl_errno ($id ::: int) ::: int;
function curl_close ($id ::: int) ::: void;


define('CURLINFO_EFFECTIVE_URL', 100000);
define('CURLINFO_HTTP_CODE', 100001);
define('CURLINFO_FILETIME', 100002);
define('CURLINFO_TOTAL_TIME', 100003);
define('CURLINFO_NAMELOOKUP_TIME', 100004);
define('CURLINFO_CONNECT_TIME', 100005);
define('CURLINFO_PRETRANSFER_TIME', 100006);
define('CURLINFO_STARTTRANSFER_TIME', 100007);
define('CURLINFO_REDIRECT_COUNT', 100008);
define('CURLINFO_REDIRECT_TIME', 100009);
define('CURLINFO_SIZE_UPLOAD', 100010);
define('CURLINFO_SIZE_DOWNLOAD', 100011);
define('CURLINFO_SPEED_UPLOAD', 100012);
define('CURLINFO_HEADER_SIZE', 100013);
define('CURLINFO_REQUEST_SIZE', 100014);
define('CURLINFO_SSL_VERIFYRESULT', 100015);
define('CURLINFO_CONTENT_LENGTH_DOWNLOAD', 100016);
define('CURLINFO_CONTENT_LENGTH_UPLOAD', 100017);
define('CURLINFO_CONTENT_TYPE', 100018);

define('CURLOPT_ADDRESS_SCOPE', 200000);
define('CURLOPT_APPEND', 200001);
define('CURLOPT_AUTOREFERER', 200002);
define('CURLOPT_BUFFERSIZE', 200003);
define('CURLOPT_CONNECT_ONLY', 200004);
define('CURLOPT_CONNECTTIMEOUT', 200005);
define('CURLOPT_CONNECTTIMEOUT_MS', 200006);
define('CURLOPT_COOKIESESSION', 200007);
define('CURLOPT_CRLF', 200008);
define('CURLOPT_DIRLISTONLY', 200009);
define('CURLOPT_DNS_CACHE_TIMEOUT', 200010);
define('CURLOPT_FAILONERROR', 200011);
define('CURLOPT_FILETIME', 200012);
define('CURLOPT_FOLLOWLOCATION', 200013);
define('CURLOPT_FORBID_REUSE', 200014);
define('CURLOPT_FRESH_CONNECT', 200015);
define('CURLOPT_FTP_CREATE_MISSING_DIRS', 200016);
define('CURLOPT_FTP_RESPONSE_TIMEOUT', 200017);
define('CURLOPT_FTP_SKIP_PASV_IP', 200018);
define('CURLOPT_FTP_USE_EPRT', 200019);
define('CURLOPT_FTP_USE_EPSV', 200020);
define('CURLOPT_FTP_USE_PRET', 200021);
define('CURLOPT_HEADER', 200022);
define('CURLOPT_HTTP_CONTENT_DECODING', 200023);
define('CURLOPT_HTTP_TRANSFER_DECODING', 200024);
define('CURLOPT_HTTPGET', 200025);
define('CURLOPT_HTTPPROXYTUNNEL', 200026);
define('CURLOPT_IGNORE_CONTENT_LENGTH', 200027);
define('CURLOPT_INFILESIZE', 200028);
define('CURLOPT_LOW_SPEED_LIMIT', 200029);
define('CURLOPT_LOW_SPEED_TIME', 200030);
define('CURLOPT_MAXCONNECTS', 200031);
define('CURLOPT_MAXFILESIZE', 200032);
define('CURLOPT_MAXREDIRS', 200033);
define('CURLOPT_NETRC', 200034);
define('CURLOPT_NEW_DIRECTORY_PERMS', 200035);
define('CURLOPT_NEW_FILE_PERMS', 200036);
define('CURLOPT_NOBODY', 200037);
define('CURLOPT_PORT', 200038);
define('CURLOPT_POST', 200039);
define('CURLOPT_PROXY_TRANSFER_MODE', 200040);
define('CURLOPT_PROXYPORT', 200041);
define('CURLOPT_RESUME_FROM', 200042);
define('CURLOPT_SOCKS5_GSSAPI_NEC', 200043);
define('CURLOPT_SSL_SESSIONID_CACHE', 200044);
define('CURLOPT_SSL_VERIFYHOST', 200045);
define('CURLOPT_SSL_VERIFYPEER', 200046);
define('CURLOPT_TCP_NODELAY', 200047);
define('CURLOPT_TFTP_BLKSIZE', 200048);
define('CURLOPT_TIMEOUT', 200049);
define('CURLOPT_TIMEOUT_MS', 200050);
define('CURLOPT_TRANSFERTEXT', 200051);
define('CURLOPT_UNRESTRICTED_AUTH', 200052);
define('CURLOPT_UPLOAD', 200053);
define('CURLOPT_VERBOSE', 200054);
define('CURLOPT_WILDCARDMATCH', 200055);
define('CURLOPT_PROXYTYPE', 200056);
define('CURLOPT_SSLVERSION', 200057);
define('CURLOPT_HTTPAUTH', 200058);
define('CURLOPT_PROXYAUTH', 200059);
define('CURLOPT_IPRESOLVE', 200060);
define('CURLOPT_FTPSSLAUTH', 200061);
define('CURLOPT_FTP_FILEMETHOD', 200062);
define('CURLOPT_CAINFO', 200063);
define('CURLOPT_CAPATH', 200064);
define('CURLOPT_COOKIE', 200065);
define('CURLOPT_COOKIEFILE', 200066);
define('CURLOPT_COOKIEJAR', 200067);
define('CURLOPT_COOKIELIST', 200068);
define('CURLOPT_CRLFILE', 200069);
define('CURLOPT_CUSTOMREQUEST', 200070);
define('CURLOPT_EGDSOCKET', 200071);
define('CURLOPT_FTP_ACCOUNT', 200072);
define('CURLOPT_FTP_ALTERNATIVE_TO_USER', 200073);
define('CURLOPT_FTPPORT', 200074);
define('CURLOPT_INTERFACE', 200075);
define('CURLOPT_ISSUERCERT', 200076);
define('CURLOPT_KRBLEVEL', 200077);
define('CURLOPT_MAIL_FROM', 200078);
define('CURLOPT_NETRC_FILE', 200079);
define('CURLOPT_NOPROXY', 200080);
define('CURLOPT_PASSWORD', 200081);
define('CURLOPT_PROXY', 200082);
define('CURLOPT_PROXYPASSWORD', 200083);
define('CURLOPT_PROXYUSERNAME', 200084);
define('CURLOPT_PROXYUSERPWD', 200085);
define('CURLOPT_RANDOM_FILE', 200086);
define('CURLOPT_RANGE', 200087);
define('CURLOPT_REFERER', 200088);
define('CURLOPT_RTSP_SESSION_ID', 200089);
define('CURLOPT_RTSP_STREAM_URI', 200090);
define('CURLOPT_RTSP_TRANSPORT', 200091);
define('CURLOPT_SOCKS5_GSSAPI_SERVICE', 200092);
define('CURLOPT_SSH_HOST_PUBLIC_KEY_MD5', 200093);
define('CURLOPT_SSH_KNOWNHOSTS', 200094);
define('CURLOPT_SSH_PRIVATE_KEYFILE', 200095);
define('CURLOPT_SSH_PUBLIC_KEYFILE', 200096);
define('CURLOPT_SSLCERT', 200097);
define('CURLOPT_SSLCERTTYPE', 200098);
define('CURLOPT_SSLENGINE', 200099);
define('CURLOPT_SSLENGINE_DEFAULT', 200100);
define('CURLOPT_SSLKEY', 200101);
define('CURLOPT_SSLKEYPASSWD', 200102);
define('CURLOPT_SSLKEYTYPE', 200103);
define('CURLOPT_SSL_CIPHER_LIST', 200104);
define('CURLOPT_URL', 200105);
define('CURLOPT_USERAGENT', 200106);
define('CURLOPT_USERNAME', 200107);
define('CURLOPT_USERPWD', 200108);
define('CURLOPT_HTTP200ALIASES', 200109);
define('CURLOPT_HTTPHEADER', 200110);
define('CURLOPT_POSTQUOTE', 200111);
define('CURLOPT_PREQUOTE', 200112);
define('CURLOPT_QUOTE', 200113);
define('CURLOPT_MAIL_RCPT', 200114);
define('CURLOPT_POSTFIELDS', 200115);
define('CURLOPT_MAX_RECV_SPEED_LARGE', 200116);
define('CURLOPT_MAX_SEND_SPEED_LARGE', 200117);
define('CURLOPT_PUT', 200118);

define('CURLPROXY_HTTP', 400000);
define('CURLPROXY_HTTP_1_0', 400001);
define('CURLPROXY_SOCKS4', 400002);
define('CURLPROXY_SOCKS5', 400003);
define('CURLPROXY_SOCKS4A', 400004);
define('CURLPROXY_SOCKS5_HOSTNAME', 400005);

define('CURL_SSLVERSION_DEFAULT', 0);
define('CURL_SSLVERSION_TLSv1', 1);
define('CURL_SSLVERSION_SSLv2', 2);
define('CURL_SSLVERSION_SSLv3', 3);

define('CURLAUTH_BASIC', 600001);
define('CURLAUTH_DIGEST', 600002);
define('CURLAUTH_GSSNEGOTIATE', 600004);
define('CURLAUTH_NTLM', 600008);
define('CURLAUTH_ANYSAFE', 600014);
define('CURLAUTH_ANY', 600015);

define('CURL_IPRESOLVE_WHATEVER', 700000);
define('CURL_IPRESOLVE_V4', 700001);
define('CURL_IPRESOLVE_V6', 700002);

define('CURLFTPAUTH_DEFAULT', 800000);
define('CURLFTPAUTH_SSL', 800001);
define('CURLFTPAUTH_TLS', 800002);

define('CURLFTPMETHOD_MULTICWD', 900000);
define('CURLFTPMETHOD_NOCWD', 900001);
define('CURLFTPMETHOD_SINGLECWD', 900002);

define('CURLOPT_RETURNTRANSFER', 1234567);
define('CURLINFO_HEADER_OUT', 7654321);

function get_reference_counter ($v) ::: int;
function prepare_search_query ($query ::: string) ::: string;
function parse_multipart ($post ::: string, $boundary ::: string) ::: void;
function unimplemented_function ($a1 = "", $a2 = "", $a3 = "", $a4 = "", $a5 = "", $a6 = "", $a7 = "", $a8 = "", $a9 = "");

/** For local usage only **/
function system ($query ::: string) ::: int;
function raise_sigsegv () ::: void;
